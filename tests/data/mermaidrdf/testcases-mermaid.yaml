---
# Testcases.
testcases:
    test_mermaid_to_rdf:
        basic:
            mermaid: |-
                graph TD
                A --> B
                A--oC
                A[(mysql)] --> D
                B-->C
            expected: [
                ":A a :Node .",
                ":B a :Node .",
                ":C a :Node .",
                ":D a :Node .",
                ":A d3f:accesses :B .",
                ":A d3f:reads :C .",
                ":A d3f:accesses :D .",
                ":A a d3f:DatabaseServer .",
                ':A rdfs:label """mysql""" .',
                ":B d3f:accesses :C ."
                ]
        label_d3f:
            mermaid: |-
                graph TD
                D3fend[[Example d3f:NetworkNode]]
            expected:
            - :D3fend a :Node .
            - :D3fend a d3f:NetworkNode .
            - :D3fend rdfs:label """Example d3f:NetworkNode""" .
            - :D3fend a d3f:Server .
        sqlquery:
            mermaid: |-
                graph TD
                App --> |via d3f:DatabaseQuery| DB[(sql)]
            expected:
            - ":App d3f:accesses :DB ."
            - ":App a :Node ."
            - ":DB a :Node ."
            - ":DB a d3f:DatabaseServer ."
            - ':DB rdfs:label """sql""" .'
            - ':App d3f:produces d3f:DatabaseQuery .'
            - ':DB d3f:uses d3f:DatabaseQuery .'
        email:
            mermaid: |-
                graph TD
                Client --> |via fa:fa-envelope| MTA
            expected:
            - ':MTA a :Node .'
            - ':Client a :Node .'
            - ':Client d3f:accesses :MTA .'
            - ':MTA d3f:uses d3f:Email .'
            - ':Client d3f:produces d3f:Email .'
            - ':Client d3f:produces d3f:MailNetworkTraffic .'
            - ':MTA d3f:uses d3f:MailNetworkTraffic .'
        internet:
            mermaid: |-
                graph TD
                Client --> |via fa:fa-globe| Internet
            expected:
            - ':Internet a :Node .'
            - ':Client a :Node .'
            - ':Client d3f:accesses :Internet .'
            - ':Internet d3f:uses d3f:InternetNetworkTraffic .'
            - ':Client d3f:produces d3f:InternetNetworkTraffic .'
        authnz:
            mermaid: |-
                graph TD
                OAuth --o |d3f:authenticates| Client
            expected:
            - ':OAuth a :Node .'
            - ':Client a :Node .'
            - ':OAuth a d3f:AuthorizationServer,d3f:AuthenticationService .'
            - ':OAuth d3f:authenticates :Client .'
            - ':OAuth d3f:produces d3f:LoginSession .'
            - ':Client d3f:uses d3f:LoginSession .'
            - ':OAuth d3f:produces d3f:AuthenticationLog .'
        container:
          mermaid: |-
            graph
            app[fab:fa-docker Containerized Application]
          expected:
            - ':app a :Node .'
            - ':app a d3f:ContainerProcess .'
            - ':app d3f:related d3f:ContainerOrchestrationSoftware,d3f:ContainerImage .'
            - ':app rdfs:label """fab:fa-docker Containerized Application""" .'
        container-webapp:
          mermaid: |-
            graph
            app[fab:fa-docker fab:fa-angular Containerized Application]
          expected:
            - ':app a :Node .'
            - ':app a d3f:ContainerProcess .'
            - ':app d3f:related d3f:ContainerOrchestrationSoftware,d3f:ContainerImage .'
            - ':app rdfs:label """fab:fa-docker fab:fa-angular Containerized Application""" .'
            - ':app a d3f:WebServerApplication,d3f:GraphicalUserInterface .'
