---
# Testcases.
testcases:
    test_lines_are_split_correctly: [
                [
                    A --> B --> C,
                    [[A, -->, null], [B, -->, null], &id001 [C, null, null]],
                ],
                [
                    A --o
                    |comment| B --o C,
                    [&id002 [A, --o, comment], &id003 [B, --o, null], *id001],
                ],
                [A--o|comment|B--oC, [*id002, *id003, *id001]],
                [A, [[A, null, null]]],
                [
                    "A[label]
                    --o |comment| B[[label]]",
                    [["A[label]", --o, comment], ["B[[label]]", null, null]],
                ],
                [
                    A -.-x B ---o C ---> D,
                    [
                        [A, -.-x, null],
                        [B, "---o", null],
                        [C, "--->", null],
                        [D, null, null],
                    ],
                ],
            ]

    test_mermaid_to_rdf:
        basic:
            mermaid: |-
                graph TD
                A --> B
                A--oC
                A[(mysql)] --> D
                B-->C
            expected:
                [
                    ":A a :Node .",
                    ":B a :Node .",
                    ":C a :Node .",
                    ":D a :Node .",
                    ":A d3f:accesses :B .",
                    ":A d3f:reads :C .",
                    ":A d3f:accesses :D .",
                    ":A a d3f:DatabaseServer .",
                    ':A rdfs:label """mysql""" .',
                    ":B d3f:accesses :C .",
                ]
        complex:
            mermaid: |-
                graph

                a & b --> c
                d & f --> g & h
            expected:
                [
                    ":a a :Node .",
                    ":b a :Node .",
                    ":c a :Node .",
                    ":d a :Node .",
                    ":f a :Node .",
                    ":g a :Node .",
                    ":h a :Node .",
                    ":a d3f:accesses :c .",
                    ":b d3f:accesses :c .",
                    ":d d3f:accesses :g .",
                    ":d d3f:accesses :h .",
                    ":f d3f:accesses :g .",
                    ":f d3f:accesses :h .",
                ]
        label_d3f:
            mermaid: |-
                graph TD
                D3fend[[Example d3f:NetworkNode]]
            expected:
                - :D3fend a :Node .
                - :D3fend a d3f:NetworkNode .
                - :D3fend rdfs:label """Example d3f:NetworkNode""" .
                - :D3fend a d3f:Server .
        sqlquery:
            mermaid: |-
                graph TD
                App --> |via d3f:DatabaseQuery| DB[(sql)]
            expected:
                - ":App d3f:accesses :DB ."
                - ":App a :Node ."
                - ":DB a :Node ."
                - ":DB a d3f:DatabaseServer ."
                - ':DB rdfs:label """sql""" .'
                - ":App d3f:produces d3f:DatabaseQuery ."
                - ":DB d3f:uses d3f:DatabaseQuery ."
        email:
            mermaid: |-
                graph TD
                Client --> |via d3f:Email| MTA
            expected:
                - ":MTA a :Node ."
                - ":Client a :Node ."
                - ":Client d3f:accesses :MTA ."
                - ":MTA d3f:uses d3f:Email ."
                - ":Client d3f:produces d3f:Email ."
                - ":Client d3f:produces d3f:MailNetworkTraffic ."
                - ":MTA d3f:uses d3f:MailNetworkTraffic ."
        internet:
            mermaid: |-
                graph TD
                Client --> |d3f:InternetNetworkTraffic| Internet
            expected:
                - ":Internet a :Node ."
                - ":Client a :Node ."
                - ":Client d3f:accesses :Internet ."
                - ":Internet d3f:uses d3f:InternetNetworkTraffic ."
                - ":Client d3f:produces d3f:InternetNetworkTraffic ."
        authnz:
            mermaid: |-
                graph TD
                OAuth --o |d3f:authenticates| Client
            expected:
                - ":OAuth a :Node ."
                - ":Client a :Node ."
                - ":OAuth a d3f:AuthorizationServer,d3f:AuthenticationService ."
                - ":OAuth d3f:authenticates :Client ."
                - ":OAuth d3f:produces d3f:LoginSession ."
                - ":Client d3f:uses d3f:LoginSession ."
                - ":OAuth d3f:produces d3f:AuthenticationLog ."
                - ":OAuth d3f:related d3f:AuthenticationFunction ."
        container:
            mermaid: |-
                graph
                app[fab:fa-docker Containerized Application]
            expected:
                - ":app a :Node ."
                - ":app d3f:related d3f:ContainerOrchestrationSoftware,d3f:ContainerImage ."
                - ':app rdfs:label """fab:fa-docker Containerized Application""" .'
        container-webapp:
            mermaid: |-
                graph
                app[fab:fa-angular fab:fa-docker Containerized Application]
            expected:
                - ":app a :Node ."
                - ":app d3f:related d3f:ContainerOrchestrationSoftware,d3f:ContainerImage ."
                - ':app rdfs:label """fab:fa-angular fab:fa-docker Containerized Application""" .'
                - ":app a d3f:WebServerApplication,d3f:GraphicalUserInterface ."
        duplicate_subgraphs:
            mermaid: |-
                graph TD
                subgraph A
                a --> B
                end
                subgraph A
                a -.- C
                end
            expected:
                - ":B a :Node ."
                - ":C d3f:related :a ."
                - ":C a :Node ."
                - ":a a :Node ."
                - ":a d3f:accesses :B ."
